report.txt - og14775

I have implemented:

    Variables and assignment
    Arithmetic expressions (+, -, *)
    read statements
    if and skip statements
    while loops
    Boolean expressions (true, false, !, &)
    Whole language
    Other :

        Divide: / 
        Bitwise XOR: ^
        Not equal to !=
        Logical Or: ||
        Greater than >
        Smaller Than <
        Greater than or equal to >=
        Smaller than or equal to <=
        Optimisations to reduce register number (described below)

To run and compile the compiler - follow procedure as normal: (using assmule created by Steve Gregory)

1. make
2. ./antlr3 camle testX.w
3. ./assmule testX.ass such that X is 1 through 7

(for all files)

Output listing: 

testsk.w : 

---testsk.ass ASSEMBLY BEGINS
---testsk.ass ASSEMBLY ENDS
---testsk.ass EXECUTION BEGINS
9hello world
0
123456789
56
---testsk.ass EXECUTION ENDS
STATISTICS:
  20 instructions generated
  2 registers used
  17 instructions executed

test1.w :

---test1.ass ASSEMBLY BEGINS
---test1.ass ASSEMBLY ENDS
---test1.ass EXECUTION BEGINS
10023
10023
76
76
---test1.ass EXECUTION ENDS
STATISTICS:
  22 instructions generated
  3 registers used
  22 instructions executed

test2.w :

---test2.ass ASSEMBLY BEGINS
---test2.ass ASSEMBLY ENDS
---test2.ass EXECUTION BEGINS
72
-5
28
-91
70
---test2.ass EXECUTION ENDS
STATISTICS:
  47 instructions generated
  16 registers used
  47 instructions executed

test3.w : 

---test3.ass ASSEMBLY BEGINS
---test3.ass ASSEMBLY ENDS
---test3.ass EXECUTION BEGINS
Enter a number: 4591
Enter a number: 2
First is 4591; second is 2
---test3.ass EXECUTION ENDS
STATISTICS:
  15 instructions generated
  2 registers used
  15 instructions executed

test4.w :

---test4.ass ASSEMBLY BEGINS
---test4.ass ASSEMBLY ENDS
---test4.ass EXECUTION BEGINS
13
5

78bce
---test4.ass EXECUTION ENDS
STATISTICS:
  119 instructions generated
  3 registers used
  83 instructions executed

test5.w : (using -j flag)

ASS/MULE - ASSembler/eMUlator for Language Engineering - v2.7 - Steve Gregory
---test5.ass ASSEMBLY BEGINS
---test5.ass ASSEMBLY ENDS
---test5.ass EXECUTION BEGINS
1
WARNING: Disabled backward jump in    9: JMP 1  
3
WARNING: Disabled backward jump in   25: JMP 18  
7
WARNING: Disabled backward jump in   45: JMP 37  
b
WARNING: Disabled backward jump in   69: JMP 63  
c
WARNING: Disabled backward jump in   83: JMP 76  
d
WARNING: Disabled backward jump in   91: JMP 84  
WARNING: Disabled backward jump in   92: JMP 70  
---test5.ass EXECUTION ENDS
STATISTICS:
  94 instructions generated
  3 registers used
  69 instructions executed

test6.w : 

---test6.ass ASSEMBLY BEGINS
---test6.ass ASSEMBLY ENDS
---test6.ass EXECUTION BEGINS
true
false
false
true
true
false
false
false
true
false
false
false
false
---test6.ass EXECUTION ENDS
STATISTICS:
  63 instructions generated
  1 registers used
  36 instructions executed

test7.w : 

ASS/MULE - ASSembler/eMUlator for Language Engineering - v2.7 - Steve Gregory
---test7.ass ASSEMBLY BEGINS
---test7.ass ASSEMBLY ENDS
---test7.ass EXECUTION BEGINS
Factorial calculator
Enter number: 9
Factorial of 9 is 362880

Exponential calculator
Enter base: 5
Enter exponent: 3
5 raised to the power of 3 is 125
---test7.ass EXECUTION ENDS
STATISTICS:
  77 instructions generated
  12 registers used
  206 instructions executed


Extras:

Implemented functionality for:

        Operators:

        Divide: / 
        Bitwise XOR: ^

        Comparison operators:

        Logical OR: ||
        Not equal to: !=
        Greater than: >
        Smaller Than: <
        Greater than or equal to: >=
        Smaller than or equal to: <=

        Register allocation efficiency optimisation: 

        Problem: Each load instruction uses an extra register. It can use the same register from which the store/read instruction initialised. As well as this each constant uses an extra register even if the constant has been allocated to a register before hand.

        As well as this constants use new registers each time they are used in expressions.

        Solution: Two solutions, firstly: Create a hashmap from the memory address of the variable to the register it uses upon a store or read and upon loading check the hashmap from the memory address given and use that register if it exists in the hashmap. As well as this for constants, check if the constant has been used before in a separate hashmap and use the very same register that had been initialised before. If it hasn't been initialised, use a new register.

        secondly: To solve the constant re use problem I recursively calculate the number of constants of all subtrees used in expressions and after the expression has been calculated, I decrease the global register count in order to re use those same registers.


I spent 9 hours on extra features in total.



