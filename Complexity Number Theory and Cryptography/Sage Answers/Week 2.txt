Assuming integers Z:

a) The group of 3 × 2 matrices modulo 4 with matrix addition as the group operation.

The neutral element is the zero matrix.
The order of the group is 4^6
The group is abelian.
There is no generator.

b) The group of invertible 2×2 matrices modulo 3 with matrix multiplication as the group operation.

The neutral element is the identity matrix.
The order of the group is 4*2^2*3^2 + 2*3*2*3*2
The group is not abelian.
There is no generator for this group.

c) The group of permutations of the set S = {0,1,2,3,4}

The neutral element is the function that maps to itself.
The group order is 5!
The group is not abelian.
There is no generator.


2a) The order of the group of the elliptic curve given by a = 7 and b = 3 modulo p = 1009 

E.order() = 980

E.abelian_group()
Additive abelian group isomorphic to Z/490 + Z/2 embedded in Abelian group of points on Elliptic Curve defined by y^2 = x^3 + 7*x + 3 over Ring of integers modulo 1009

c)

// Takes an elliptic curve point P and an 
// integer n and adds P to itself n times.

def elliptic_add(P, n):
    for iterator in range(1, n):
        P += P
    return P

Use your algorithm to compute 512 · (9064, 6692) on the curve defined by a = 11, b = 4 modulo p = 10037.

h = G([9064, 6692])
elliptic_add(h, 512) = (5142, 244)

3a)

We could first check it is a valid cycle by checking all elements on the top are on the bottom (and nothing but!) and that they are non repeated.

Now let's go through the matrix.
Very easy, organise matrix go from one row to another checking.

4) Moving swiftly on...

Write a function that takes as input integers a, b, c and finds a solution to the equation 
a^x = b (mod c)


e.g. 5 ^ x = 12 mod(c)


def MyPowMod(a, b, c):
    acc = 1
    temp = a
    while(b > 0):
        if b % 2 == 1:
            acc = (acc * temp) % c
        temp = (temp*temp) % c
        b = b // 2
    return acc


def question_four(a,b,c):
    counter = 1
    d = 0
    while (d != 1):
        if(b == MyPowMod(a, counter, c)):
            d = 1
            return counter
        counter += 1 


question_four(34091202317940, 46461034929471, 61704897745301) = 29393













